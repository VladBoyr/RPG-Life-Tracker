# Generated by Django 5.2.5 on 2025-10-04 22:03

from django.db import migrations
from django.db.models import Q
from datetime import datetime, timezone as dt_timezone, timedelta
from django.utils import timezone

def forwards_func(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    Character = apps.get_model('api', 'Character')
    Skill = apps.get_model('api', 'Skill')
    GoalCompletion = apps.get_model('api', 'GoalCompletion')
    GoalHistory = apps.get_model('api', 'GoalHistory')

    GoalHistory.objects.all().delete()

    all_history_entries = []
    migration_time = timezone.now()

    def get_xp_for_skill_level(lvl):
        return 100 * lvl

    def get_xp_for_char_level(lvl):
        if lvl == 1: return 100
        if lvl < 4: return lvl * 120
        return round(100 * (lvl ** 1.5)) 

    for user in User.objects.all().iterator():
        try:
            character = Character.objects.get(user=user)
        except Character.DoesNotExist:
            continue

        total_sum_of_skills_xp = 0
        user_skills = Skill.objects.filter(Q(character=character) | Q(group__members=user)).distinct()

        for skill in user_skills:
            total_accumulated_xp = 0
            for lvl in range(1, skill.level):
                total_accumulated_xp += get_xp_for_skill_level(lvl)
            total_accumulated_xp += skill.current_xp

            total_sum_of_skills_xp += total_accumulated_xp

            accounted_xp_from_goals = 0
            earliest_timestamp = migration_time + timedelta(days=1)

            completions_for_skill = GoalCompletion.objects.filter(owner=user, goal__skill=skill)

            for completion in completions_for_skill:
                naive_timestamp = datetime.combine(completion.completion_date, datetime.min.time())
                aware_timestamp = timezone.make_aware(naive_timestamp, dt_timezone.utc)
                if aware_timestamp < earliest_timestamp:
                    earliest_timestamp = aware_timestamp
                accounted_xp_from_goals += completion.goal.xp_reward
                all_history_entries.append(
                    GoalHistory(owner=user, goal_description=completion.goal.description, skill_name=skill.name, skill_id=skill.id, xp_amount=completion.goal.xp_reward, action='COMPLETED', timestamp=aware_timestamp)
                )

            missing_xp = total_accumulated_xp - accounted_xp_from_goals
            if missing_xp > 0:
                units = missing_xp // skill.xp_per_unit if skill.xp_per_unit > 0 else 0
                description = f"{units} ед. прогресса (исторические данные)"
                historical_timestamp = (earliest_timestamp - timedelta(seconds=1)) if earliest_timestamp < migration_time else (migration_time - timedelta(days=1))
                all_history_entries.append(
                    GoalHistory(owner=user, goal_description=description, skill_name=skill.name, skill_id=skill.id, xp_amount=missing_xp, action='PROGRESS_ADDED', timestamp=historical_timestamp)
                )

        total_character_xp = 0
        for lvl in range(1, character.level):
            total_character_xp += get_xp_for_char_level(lvl)
        total_character_xp += character.current_xp

        xp_discrepancy = total_character_xp - total_sum_of_skills_xp

        if xp_discrepancy > 0:
            xp_per_unit_assumed = 10
            units = xp_discrepancy // xp_per_unit_assumed
            description = f"{units} ед. прогресса (исторические данные)"

            discrepancy_timestamp = (earliest_timestamp - timedelta(seconds=2)) if earliest_timestamp < migration_time else (migration_time - timedelta(days=1))

            all_history_entries.append(
                GoalHistory(
                    owner=user,
                    goal_description=description,
                    skill_name="Общий опыт персонажа",
                    skill_id=None,
                    xp_amount=xp_discrepancy,
                    action='PROGRESS_ADDED',
                    timestamp=discrepancy_timestamp
                )
            )

    if all_history_entries:
        GoalHistory.objects.bulk_create(all_history_entries, batch_size=500)

def backwards_func(apps, schema_editor):
    GoalHistory = apps.get_model('api', 'GoalHistory')
    GoalHistory.objects.all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('api', '0014_goalhistory_skill_id'),
    ]
    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
